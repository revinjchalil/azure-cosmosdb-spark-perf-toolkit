{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1582878440270_-577010719","id":"20200228-082720_2045610153","dateCreated":"2020-02-28T08:27:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:575","text":"import org.json.simple.JSONArray\r\nimport org.json.simple.JSONObject\r\nimport org.json.simple.parser._\r\nimport org.apache.spark.sql.types.{StringType, StructField, StructType}\r\nimport org.apache.spark.sql.Row\r\nimport org.apache.spark.sql.DataFrame\r\nimport org.apache.spark.rdd.RDD\r\nimport org.apache.spark.sql.Dataset\r\nimport org.apache.spark.sql.SQLContext\r\nimport org.apache.hadoop.fs.Path\r\nimport org.apache.hadoop.fs.FileSystem\r\nimport java.net.URI\r\nimport org.apache.hadoop.conf.Configuration\r\n\r\nspark.conf.set(\"fs.azure.account.auth.type\", \"SharedKey\")","dateUpdated":"2020-02-28T08:45:25+0000","dateFinished":"2020-02-28T08:37:06+0000","dateStarted":"2020-02-28T08:36:30+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.json.simple.JSONArray\nimport org.json.simple.JSONObject\nimport org.json.simple.parser._\nimport org.apache.spark.sql.types.{StringType, StructField, StructType}\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.SQLContext\nimport org.apache.hadoop.fs.Path\nimport org.apache.hadoop.fs.FileSystem\nimport java.net.URI\nimport org.apache.hadoop.conf.Configuration"},{"type":"HTML","data":"<hr/>Spark Application Id: application_1581948376528_0029<br/>Spark WebUI: <a href=\"http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/\">http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/</a>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1582878977144_-1275194147","id":"20200228-083617_1573874594","dateCreated":"2020-02-28T08:36:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:647","text":"// Set params here\r\n\r\nval tagNames = List(\"blitz_wildfire_qS_r1\", \"blitz_qS_r2\")\r\nval storageName = \"abfs://runresultstorage@tpcdsperfresults.dfs.core.windows.net\"\r\nval scaleName = \"sf_1000\"\r\nspark.conf.set(\"fs.azure.account.key.tpcdsperfresults.dfs.core.windows.net\", \"ENTER KEY!!\")","dateUpdated":"2020-02-28T08:45:53+0000","dateFinished":"2020-02-28T08:37:36+0000","dateStarted":"2020-02-28T08:37:35+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tagNames: List[String] = List(blitz_wildfire_qS_r1, blitz_qS_r2)\nstorageName: String = abfs://runresultstorage@tpcdsperfresults.dfs.core.windows.net\nscaleName: String = sf_1000"},{"type":"HTML","data":"<hr/>Spark Application Id: application_1581948376528_0029<br/>Spark WebUI: <a href=\"http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/\">http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/</a>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1582878380541_-660881078","id":"20200228-082620_39722749","dateCreated":"2020-02-28T08:26:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:287","text":"\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////\r\n\r\ndef getRuns(path: String):Set[String] = {\r\n    val conf = new Configuration()\r\n    conf.set(\"fs.azure.account.auth.type\", \"SharedKey\")\r\n    conf.set(\"fs.azure.account.key.tpcdsperfresults.dfs.core.windows.net\",\r\n             spark.conf.get(\"fs.azure.account.key.tpcdsperfresults.dfs.core.windows.net\"))\r\n    \r\n    val fs = FileSystem.get(new URI(path), conf)\r\n    val status = fs.listStatus(new Path(path))\r\n    status.map(_.getPath.getName).toSet\r\n}\r\n\r\nval allRuns = tagNames.map{ tag =>\r\n    getRuns(s\"$storageName/$tag/$scaleName/spark-events/\")\r\n}\r\n\r\nval commonRuns = allRuns.tail.fold(allRuns.head)(_ & _)\r\n\r\nval qryRunResults = commonRuns.toList.map{ qryName =>\r\n    val runPlans = tagNames.map{ tagName =>\r\n        val textEvents = spark.read.textFile(s\"$storageName/$tagName/$scaleName/spark-events/$qryName/*.inprogress\")  \r\n\r\n        val textPlans = textEvents.\r\n            filter(textEvents(\"value\").contains(\"SparkListenerSQLExecutionStart\")).\r\n            filter(!textEvents(\"value\").contains(\"SetDatabaseCommand\")).\r\n            map { row =>\r\n                val obj = new JSONParser().parse(row).asInstanceOf[JSONObject]\r\n                obj.get(\"physicalPlanDescription\").asInstanceOf[String]\r\n            }\r\n                                \r\n\r\n        val pattern = (\"== Parsed Logical Plan ==\\\\n([\\\\s\\\\S]*)== Analyzed Logical Plan ==\\\\n([\\\\s\\\\S]*)==\"+\r\n            \" Optimized Logical Plan ==\\\\n([\\\\s\\\\S]*)== Physical Plan ==\\\\n([\\\\s\\\\S]*)\").r\r\n\r\n        val RDDPlan = textPlans.rdd.map{ ps =>\r\n            ps.mkString match {\r\n                case pattern(plp,alp,olp,pp) => Row(plp,alp,olp,pp)\r\n            }\r\n        }\r\n\r\n        RDDPlan.coalesce(1)\r\n    }\r\n                      \r\n    val compareResult = runPlans.tail.map{ run1 =>\r\n        run1.zip(runPlans.head).map(qryResult => Row(qryResult._1.equals(qryResult._2))) \r\n    }\r\n    \r\n    val finalCompareResult = compareResult.tail.fold(compareResult.head){ (resultLeft, resultRight) => \r\n        resultLeft.zip(resultRight).map(qryResult => Row(qryResult._1.getBoolean(0) && qryResult._2.getBoolean(0)))\r\n    }\r\n                                          \r\n    finalCompareResult.map(Row(qryName, _))\r\n}\r\n\r\nval mergedQryRunResults = qryRunResults.tail.foldLeft(qryRunResults.head)(_ ++ _)\r\nmergedQryRunResults.distinct.collect.foreach(println)\r\n\r\n\r\n","dateUpdated":"2020-02-28T08:37:50+0000","dateFinished":"2020-02-28T08:42:26+0000","dateStarted":"2020-02-28T08:37:50+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getRuns: (path: String)Set[String]\nallRuns: List[Set[String]] = List(Set(queryId=query2, queryId=query90, queryId=query6, queryId=query9, queryId=query47, queryId=query1, queryId=query30, queryId=query5, queryId=query81, queryId=query28, queryId=query31, queryId=query75, queryId=query7, queryId=query88, queryId=query3, queryId=query8, queryId=query74, queryId=query10, queryId=query11), Set(queryId=query2, queryId=query90, queryId=query6, queryId=query9, queryId=query47, queryId=query1, queryId=query30, queryId=query5, queryId=query81, queryId=query28, queryId=query31, queryId=query75, queryId=query7, queryId=query88, queryId=query3, queryId=query8, queryId=query64, queryId=query74, queryId=query10, queryId=query11))\ncommonRuns: Set[String] = Set(queryId=query2, queryId=query90, queryId=query6, queryId=query9, queryId=query47, queryId=query1, queryId=query30, queryId=query5, queryId=query81, queryId=query28, queryId=query31, queryId=query75, queryId=query7, queryId=query88, queryId=query3, queryId=query8, queryId=query74, queryId=query10, queryId=query11)\nqryRunResults: List[org.apache.spark.rdd.RDD[org.apache.spark.sql.Row]] = List(MapPartitionsRDD[16] at map at <console>:80, MapPartitionsRDD[33] at map at <console>:80, MapPartitionsRDD[50] at map at <console>:80, MapPartitionsRDD[67] at map at <console>:80, MapPartitionsRDD[84] at map at <console>:80, MapPartitionsRDD[101] at map at <console>:80, MapPartitionsRDD[118] at map at <console>:80, MapPartitionsRDD[135] at map at <console>:80, MapPartitionsRDD[152] at map at <console>:80, MapPartitionsRDD[169] at map at <console>:80, MapPartitionsRDD[186] at map at <console>:80, MapPartitionsRDD[203] at map at <console>:80, MapPartitionsRDD[220] at map at <console>:80, MapPartitionsRDD[237] at map at <console>:80, MapPartitionsRDD[254] at map at <console>:80, MapPartitionsRDD[271] at map at <...mergedQryRunResults: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = UnionRDD[340] at $plus$plus at <console>:41\n[queryId=query8,[false]]\n[queryId=query31,[false]]\n[queryId=query5,[false]]\n[queryId=query2,[false]]\n[queryId=query6,[false]]\n[queryId=query11,[false]]\n[queryId=query47,[false]]\n[queryId=query10,[false]]\n[queryId=query81,[false]]\n[queryId=query90,[false]]\n[queryId=query9,[false]]\n[queryId=query1,[false]]\n[queryId=query7,[false]]\n[queryId=query30,[false]]\n[queryId=query3,[false]]\n[queryId=query88,[false]]\n[queryId=query28,[true]]\n[queryId=query75,[false]]\n[queryId=query74,[false]]"},{"type":"HTML","data":"<hr/>Spark Application Id: application_1581948376528_0029<br/>Spark WebUI: <a href=\"http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/\">http://hn0-stspar.5ck5n31m2omehg2oolgp35ygza.ax.internal.cloudapp.net:8088/proxy/application_1581948376528_0029/</a>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1582878424302_-497996409","id":"20200228-082704_800263405","dateCreated":"2020-02-28T08:27:04+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:496"}],"name":"PlanCompare","id":"2F2S2T21H","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}